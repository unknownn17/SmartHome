// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: device.proto

package deviceproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Devices_AddDevice_FullMethodName        = "/Devices/AddDevice"
	Devices_Commands_FullMethodName         = "/Devices/Commands"
	Devices_ListDevices_FullMethodName      = "/Devices/ListDevices"
	Devices_DeleteDevice_FullMethodName     = "/Devices/DeleteDevice"
	Devices_GetDevices_FullMethodName       = "/Devices/GetDevices"
	Devices_Speaker_FullMethodName          = "/Devices/Speaker"
	Devices_SpeakerGet_FullMethodName       = "/Devices/SpeakerGet"
	Devices_VaccumCleanerGet_FullMethodName = "/Devices/VaccumCleanerGet"
	Devices_VaccumClenaer_FullMethodName    = "/Devices/VaccumClenaer"
	Devices_SmartAlarms_FullMethodName      = "/Devices/SmartAlarms"
	Devices_SmartAlarmGet_FullMethodName    = "/Devices/SmartAlarmGet"
	Devices_GetDoor_FullMethodName          = "/Devices/GetDoor"
	Devices_Door_FullMethodName             = "/Devices/Door"
)

// DevicesClient is the client API for Devices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevicesClient interface {
	AddDevice(ctx context.Context, in *AddDeviceRequest, opts ...grpc.CallOption) (*AddDeviceResponse, error)
	Commands(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	ListDevices(ctx context.Context, in *Deviceslist, opts ...grpc.CallOption) (*DevicesTop, error)
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error)
	GetDevices(ctx context.Context, in *GetdevicesRequest, opts ...grpc.CallOption) (*GetdevicesResponse, error)
	Speaker(ctx context.Context, in *SpeakerCommandRequest, opts ...grpc.CallOption) (*Notification, error)
	SpeakerGet(ctx context.Context, in *GETDeviceRequest, opts ...grpc.CallOption) (*SpeakerDeviceResponse, error)
	VaccumCleanerGet(ctx context.Context, in *GETDeviceRequest, opts ...grpc.CallOption) (*VaccumCleanaer, error)
	VaccumClenaer(ctx context.Context, in *VaccumCleanaer, opts ...grpc.CallOption) (*Notification, error)
	SmartAlarms(ctx context.Context, in *SmartAlarm, opts ...grpc.CallOption) (*Notification, error)
	SmartAlarmGet(ctx context.Context, in *GETDeviceRequest, opts ...grpc.CallOption) (*SmartAlarm, error)
	GetDoor(ctx context.Context, in *GETDeviceRequest, opts ...grpc.CallOption) (*LockDoor, error)
	Door(ctx context.Context, in *LockDoor, opts ...grpc.CallOption) (*Notification, error)
}

type devicesClient struct {
	cc grpc.ClientConnInterface
}

func NewDevicesClient(cc grpc.ClientConnInterface) DevicesClient {
	return &devicesClient{cc}
}

func (c *devicesClient) AddDevice(ctx context.Context, in *AddDeviceRequest, opts ...grpc.CallOption) (*AddDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDeviceResponse)
	err := c.cc.Invoke(ctx, Devices_AddDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) Commands(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, Devices_Commands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) ListDevices(ctx context.Context, in *Deviceslist, opts ...grpc.CallOption) (*DevicesTop, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DevicesTop)
	err := c.cc.Invoke(ctx, Devices_ListDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDeviceResponse)
	err := c.cc.Invoke(ctx, Devices_DeleteDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) GetDevices(ctx context.Context, in *GetdevicesRequest, opts ...grpc.CallOption) (*GetdevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetdevicesResponse)
	err := c.cc.Invoke(ctx, Devices_GetDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) Speaker(ctx context.Context, in *SpeakerCommandRequest, opts ...grpc.CallOption) (*Notification, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Notification)
	err := c.cc.Invoke(ctx, Devices_Speaker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) SpeakerGet(ctx context.Context, in *GETDeviceRequest, opts ...grpc.CallOption) (*SpeakerDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpeakerDeviceResponse)
	err := c.cc.Invoke(ctx, Devices_SpeakerGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) VaccumCleanerGet(ctx context.Context, in *GETDeviceRequest, opts ...grpc.CallOption) (*VaccumCleanaer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VaccumCleanaer)
	err := c.cc.Invoke(ctx, Devices_VaccumCleanerGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) VaccumClenaer(ctx context.Context, in *VaccumCleanaer, opts ...grpc.CallOption) (*Notification, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Notification)
	err := c.cc.Invoke(ctx, Devices_VaccumClenaer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) SmartAlarms(ctx context.Context, in *SmartAlarm, opts ...grpc.CallOption) (*Notification, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Notification)
	err := c.cc.Invoke(ctx, Devices_SmartAlarms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) SmartAlarmGet(ctx context.Context, in *GETDeviceRequest, opts ...grpc.CallOption) (*SmartAlarm, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SmartAlarm)
	err := c.cc.Invoke(ctx, Devices_SmartAlarmGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) GetDoor(ctx context.Context, in *GETDeviceRequest, opts ...grpc.CallOption) (*LockDoor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockDoor)
	err := c.cc.Invoke(ctx, Devices_GetDoor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) Door(ctx context.Context, in *LockDoor, opts ...grpc.CallOption) (*Notification, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Notification)
	err := c.cc.Invoke(ctx, Devices_Door_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevicesServer is the server API for Devices service.
// All implementations must embed UnimplementedDevicesServer
// for forward compatibility
type DevicesServer interface {
	AddDevice(context.Context, *AddDeviceRequest) (*AddDeviceResponse, error)
	Commands(context.Context, *CommandRequest) (*CommandResponse, error)
	ListDevices(context.Context, *Deviceslist) (*DevicesTop, error)
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error)
	GetDevices(context.Context, *GetdevicesRequest) (*GetdevicesResponse, error)
	Speaker(context.Context, *SpeakerCommandRequest) (*Notification, error)
	SpeakerGet(context.Context, *GETDeviceRequest) (*SpeakerDeviceResponse, error)
	VaccumCleanerGet(context.Context, *GETDeviceRequest) (*VaccumCleanaer, error)
	VaccumClenaer(context.Context, *VaccumCleanaer) (*Notification, error)
	SmartAlarms(context.Context, *SmartAlarm) (*Notification, error)
	SmartAlarmGet(context.Context, *GETDeviceRequest) (*SmartAlarm, error)
	GetDoor(context.Context, *GETDeviceRequest) (*LockDoor, error)
	Door(context.Context, *LockDoor) (*Notification, error)
	mustEmbedUnimplementedDevicesServer()
}

// UnimplementedDevicesServer must be embedded to have forward compatible implementations.
type UnimplementedDevicesServer struct {
}

func (UnimplementedDevicesServer) AddDevice(context.Context, *AddDeviceRequest) (*AddDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDevice not implemented")
}
func (UnimplementedDevicesServer) Commands(context.Context, *CommandRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commands not implemented")
}
func (UnimplementedDevicesServer) ListDevices(context.Context, *Deviceslist) (*DevicesTop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedDevicesServer) DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedDevicesServer) GetDevices(context.Context, *GetdevicesRequest) (*GetdevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (UnimplementedDevicesServer) Speaker(context.Context, *SpeakerCommandRequest) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Speaker not implemented")
}
func (UnimplementedDevicesServer) SpeakerGet(context.Context, *GETDeviceRequest) (*SpeakerDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpeakerGet not implemented")
}
func (UnimplementedDevicesServer) VaccumCleanerGet(context.Context, *GETDeviceRequest) (*VaccumCleanaer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VaccumCleanerGet not implemented")
}
func (UnimplementedDevicesServer) VaccumClenaer(context.Context, *VaccumCleanaer) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VaccumClenaer not implemented")
}
func (UnimplementedDevicesServer) SmartAlarms(context.Context, *SmartAlarm) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmartAlarms not implemented")
}
func (UnimplementedDevicesServer) SmartAlarmGet(context.Context, *GETDeviceRequest) (*SmartAlarm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmartAlarmGet not implemented")
}
func (UnimplementedDevicesServer) GetDoor(context.Context, *GETDeviceRequest) (*LockDoor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoor not implemented")
}
func (UnimplementedDevicesServer) Door(context.Context, *LockDoor) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Door not implemented")
}
func (UnimplementedDevicesServer) mustEmbedUnimplementedDevicesServer() {}

// UnsafeDevicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevicesServer will
// result in compilation errors.
type UnsafeDevicesServer interface {
	mustEmbedUnimplementedDevicesServer()
}

func RegisterDevicesServer(s grpc.ServiceRegistrar, srv DevicesServer) {
	s.RegisterService(&Devices_ServiceDesc, srv)
}

func _Devices_AddDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).AddDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devices_AddDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).AddDevice(ctx, req.(*AddDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_Commands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).Commands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devices_Commands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).Commands(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deviceslist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devices_ListDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).ListDevices(ctx, req.(*Deviceslist))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devices_DeleteDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetdevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devices_GetDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).GetDevices(ctx, req.(*GetdevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_Speaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpeakerCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).Speaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devices_Speaker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).Speaker(ctx, req.(*SpeakerCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_SpeakerGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GETDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).SpeakerGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devices_SpeakerGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).SpeakerGet(ctx, req.(*GETDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_VaccumCleanerGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GETDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).VaccumCleanerGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devices_VaccumCleanerGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).VaccumCleanerGet(ctx, req.(*GETDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_VaccumClenaer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VaccumCleanaer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).VaccumClenaer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devices_VaccumClenaer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).VaccumClenaer(ctx, req.(*VaccumCleanaer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_SmartAlarms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmartAlarm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).SmartAlarms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devices_SmartAlarms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).SmartAlarms(ctx, req.(*SmartAlarm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_SmartAlarmGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GETDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).SmartAlarmGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devices_SmartAlarmGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).SmartAlarmGet(ctx, req.(*GETDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_GetDoor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GETDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).GetDoor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devices_GetDoor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).GetDoor(ctx, req.(*GETDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_Door_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockDoor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).Door(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devices_Door_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).Door(ctx, req.(*LockDoor))
	}
	return interceptor(ctx, in, info, handler)
}

// Devices_ServiceDesc is the grpc.ServiceDesc for Devices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Devices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Devices",
	HandlerType: (*DevicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDevice",
			Handler:    _Devices_AddDevice_Handler,
		},
		{
			MethodName: "Commands",
			Handler:    _Devices_Commands_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _Devices_ListDevices_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _Devices_DeleteDevice_Handler,
		},
		{
			MethodName: "GetDevices",
			Handler:    _Devices_GetDevices_Handler,
		},
		{
			MethodName: "Speaker",
			Handler:    _Devices_Speaker_Handler,
		},
		{
			MethodName: "SpeakerGet",
			Handler:    _Devices_SpeakerGet_Handler,
		},
		{
			MethodName: "VaccumCleanerGet",
			Handler:    _Devices_VaccumCleanerGet_Handler,
		},
		{
			MethodName: "VaccumClenaer",
			Handler:    _Devices_VaccumClenaer_Handler,
		},
		{
			MethodName: "SmartAlarms",
			Handler:    _Devices_SmartAlarms_Handler,
		},
		{
			MethodName: "SmartAlarmGet",
			Handler:    _Devices_SmartAlarmGet_Handler,
		},
		{
			MethodName: "GetDoor",
			Handler:    _Devices_GetDoor_Handler,
		},
		{
			MethodName: "Door",
			Handler:    _Devices_Door_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device.proto",
}
